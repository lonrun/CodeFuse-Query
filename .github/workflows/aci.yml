name: GDL script file checker
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  example-job:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository to the runner
        uses: actions/checkout@v4

      - name: Install locales
        run: |
          sudo apt-get update && sudo apt-get install -y locales
          sudo locale-gen zh_CN.UTF-8
        env:
          LANG: zh_CN.UTF-8
          LANGUAGE: zh_CN:zh:en_US:en

      - name: Set execute permissions for script
        run: chmod +x ./scripts/check_gdl.sh

      - name: Download and extract the latest sparrow-cli release
        run: |
          # Set up the repository owner and repository name
          REPO_OWNER="codefuse-ai"
          REPO_NAME="CodeFuse-Query"
          ASSET_NAME="sparrow-cli.*.linux.tar.gz" # This pattern should match only the tar.gz file
      
          # Create the directory where the asset will be downloaded
          mkdir -p $HOME/sparrow-cli
      
          # Use GitHub API to get the latest release information
          RELEASE_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/latest")
      
          # Extract the asset download URL for the asset name specified
          # The test function is used to ensure we match only the tar.gz file, not the checksum file
          ASSET_URL=$(echo "$RELEASE_INFO" | jq --arg asset_name "$ASSET_NAME" -r '.assets[] | select(.name | test($asset_name)) | select(.content_type == "application/x-gzip").browser_download_url')
      
          # Check if the asset URL is empty or not
          if [ -z "$ASSET_URL" ]; then
            echo "Error: Asset URL is empty."
            exit 1
          fi
      
          # Download and extract the asset
          echo "Downloading $ASSET_URL to $HOME/sparrow-cli/sparrow-cli.tar.gz"
          curl -fL --retry 5 "$ASSET_URL" | tar -xz -C $HOME/sparrow-cli
        env:
          # The GitHub token is needed for API requests to avoid rate limits
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GDL script checking
        run: ./scripts/check_gdl.sh .
        env:
          LC_ALL: zh_CN.UTF-8
